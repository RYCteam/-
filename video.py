import cv2
from ultralytics import YOLO
import os
import numpy as np
import requests
import time

# --- 1. ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ---
model = YOLO('best.pt') 
# ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
video_path = '‡πÄ‡∏ï‡πâ‡∏•‡∏≠‡∏¢.mp4' 
cap = cv2.VideoCapture(video_path)

if not cap.isOpened():
    print(f"Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ '{video_path}' ‡πÑ‡∏î‡πâ")
    exit()

# --- 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ---
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = int(cap.get(cv2.CAP_PROP_FPS))
output_folder = 'output_videos'
os.makedirs(output_folder, exist_ok=True)
base_name, ext = os.path.splitext(os.path.basename(video_path))
output_path = os.path.join(output_folder, f'{base_name}_annotated_final.mp4')
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {video_path}")

# --- 3. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ---
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)
latitude = 13.7563
longitude = 100.5018
# Discord Webhook URL
DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1389905612409802843/1NSMixTKW7N6HMaugh-sopI8gy42RUGDJFLayX_BEzcciVzJgGQfEi_NUwa7J1w1tW7T'

def send_discord_alert(image_path):
    with open(image_path, 'rb') as f:
        files = {'file': (os.path.basename(image_path), f, 'image/jpeg')}
        data = {
            'content': f'üö® ‡∏û‡∏ö‡∏Ñ‡∏ô‡∏à‡∏°‡∏ô‡πâ‡∏≥!'
        }
        try:
            response = requests.post(DISCORD_WEBHOOK_URL, data=data, files=files)
            if response.status_code == 204 or response.status_code == 200:
                print('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
            else:
                print(f'‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.status_code} {response.text}')
        except Exception as e:
            print(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord: {e}')

# --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏° drowning ---
drowning_frame_count = 0
DROWNING_ALERT_THRESHOLD = 10
ESP_IP = "192.168.1.167"
alert_sent = False

def trigger_relay(ESP_IP):
    """
    ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á HTTP GET ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ESP8266 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå
    """
    try:
        url = f"http://{ESP_IP}/relay/on"
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            print("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            time.sleep(1)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        else:
            print(f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Status Code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà IP {ESP_IP} ‡πÑ‡∏î‡πâ")
        print(f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")

def trigger_relay_off(ESP_IP):
    """
    ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á HTTP GET ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ESP8266 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå
    """
    try:
        url = f"http://{ESP_IP}/relay/off"
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            print("‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)!")
        else:
            print(f"‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, Status Code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà IP {ESP_IP} ‡πÑ‡∏î‡πâ")
        print(f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ while loop
trigger_relay_off(ESP_IP)

while cap.isOpened():
    success, frame = cap.read()
    if not success:
        break

    # --- 4. ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ iou ‡∏™‡∏π‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏ö‡∏î‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á conf ‡∏´‡∏£‡∏∑‡∏≠ iou ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
    results = model(frame, verbose=False)

    # --- 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡πÄ‡∏ü‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà" ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Non-Maximum Suppression (NMS) ---
    annotated_frame = frame.copy() 
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• boxes, scores, ‡πÅ‡∏•‡∏∞ class_ids ‡∏à‡∏≤‡∏Å results
    # ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô NMS ‡∏Ç‡∏≠‡∏á OpenCV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
    boxes = results[0].boxes.xyxy.cpu().numpy()
    scores = results[0].boxes.conf.cpu().numpy()
    class_ids = results[0].boxes.cls.cpu().numpy().astype(int)

    # ‡πÉ‡∏ä‡πâ Non-Maximum Suppression ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    # score_threshold ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤
    # nms_threshold ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ iou ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô
    indices = cv2.dnn.NMSBoxes(boxes.tolist(), scores.tolist(), score_threshold=0.3, nms_threshold=0.5)

    if len(indices) > 0:
        found_drowning = False
        for i in indices.flatten():
            x1, y1, x2, y2 = map(int, boxes[i])
            confidence = scores[i]
            class_name = model.names[class_ids[i]]
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏™
            color = (0, 255, 0) if class_name == 'swimming' else (0, 0, 255)
            
            cv2.rectangle(annotated_frame, (x1, y1), (x2, y2), color, 2)
            cv2.putText(annotated_frame, f'{class_name} {confidence:.2f}', (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)
            # --- ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ drowning ---
            if class_name == 'drowning':
                found_drowning = True

    if found_drowning:
        drowning_frame_count += 1
    else:
        drowning_frame_count = 0
        alert_sent = False

    if drowning_frame_count >= DROWNING_ALERT_THRESHOLD and not alert_sent:
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!
        alert_img_path = os.path.join(output_folder, f'drowning_alert_{cap.get(cv2.CAP_PROP_POS_FRAMES):.0f}.jpg')
        cv2.imwrite(alert_img_path, annotated_frame)
        send_discord_alert(alert_img_path)
        trigger_relay(ESP_IP)
        alert_sent = True

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
    out.write(annotated_frame)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏î
    h, w, _ = annotated_frame.shape
    scale = 960 / w
    small_frame = cv2.resize(annotated_frame, (int(w*scale), int(h*scale)))
    cv2.imshow("AI Demo (Final Version) - Press 'q' to stop & save", small_frame)

    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# --- 6. ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ---
cap.release()
out.release()
cv2.destroyAllWindows()
    
print(f"üéâ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ Demo ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå: {output_path}")

